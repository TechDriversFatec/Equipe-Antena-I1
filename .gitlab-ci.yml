image: maven:latest


stages:
    #- test
    #- build
    #- create-image
    #- deploy
    - release2
    - release
    
variables:
    IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"

#build:
#  stage: build
#  artifacts:
#    paths:
#      - target/*.jar
#script:
#    - $MAVEN_HOME/bin/mvn clean install -DskipTests
    
#  cache:
#    key: "$CI_COMMIT_REF_NAME"
#    policy: push
#    paths:
#      - .m2/repository/
#     - build
#  only:
#    - master


#test:
#  stage: test
#  script:
#    - $MAVEN_HOME/bin/mvn test
#  only:
#    - merge_requests
#    - master


#create-image:
#  image: gradle:alpine
#  stage: create-image
#  tags:
#    - deploy
#  script:
#    - cp target/*.jar .
#    - sudo docker login -u $DOCKER_USER -p $DOCKER_PASSWORD
#    - sudo docker build -t projetoantenas/antenas-integracao .
#    - sudo docker push projetoantenas/antenas-integracao
#  only:
#    - master

#.prod_deploy: &prod_deploy
#  image: google/cloud-sdk
#  script:
#    #- gcloud container clusters get-credentials cluster-antenas-gke --zone southamerica-east1-a --project united-monument-269917
#    - kubectl create deployment $NOME_SERVICO --image=projetoantenas/antenas-integracao:latest
 #   - kubectl get pods
 #   - kubectl expose deployment $NOME_SERVICO --type=LoadBalancer --port 80 --target-port 8080
 #   - kubectl get service

#deploy:
#  <<: *prod_deploy
#  stage: deploy
#  tags:
#    - cluster
#  when: manual
  #before_script:
   # - kubectl delete service $NOME_SERVICO
#  only:
 #   - master

#sonarcloud-check:
#  image: maven:3.6.3-jdk-11
#  cache:
#    key: "${CI_JOB_NAME}"
#    paths:
#      - .sonar/cache
#  script:
#    - mvn verify sonar:sonar
#  only:
#    - merge_requests
#    - master

release:
  stage: release
  tags:
    - deploy
  before_script:
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
    - git config --global url."https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.example.com/group/repo.git".insteadOf git@gitlab.example.com:group/repo.git
  script:
    - git clone https://Releaser-ci:${CI_JOB_TOKEN}@gitlab.com/jesscahelen/antenas-integracao.git
    - cd antenas-integracao
    - grep '<version>0.0.' pom.xml    
    - git config --global user.email "${CI_EMAIL}"
    - git config --global user.name "${CI_USERNAME}"
    - git config --global url."git@gitlab.com:".insteadOf "https://gitlab.com/"
    - git checkout master 
    - mvn -B -DskipTests -Darguments=-DskipTests release:clean release:prepare
  when: manual
  only:
  - master
  
release2:
  stage: release2
  image: java:8u102-jdk
  script:
    # Install ssh-agent if not already installed, it is required by Docker.
    # (change apt-get to yum if you use a CentOS-based image)
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    
    # Run ssh-agent (inside the build environment)
    - eval $(ssh-agent -s)
    
    # Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
    - ssh-add <(echo "$SSH_PRIVATE_KEY")
    
    # For Docker builds disable host key checking. Be aware that by adding that
    # you are susceptible to man-in-the-middle attacks.
    # WARNING: Use this only with the Docker executor, if you use it with shell
    # you will overwrite your user's SSH config.
    - mkdir -p ~/.ssh
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
    - git checkout -B "$CI_BUILD_REF_NAME"  
    - mvn release:prepare --settings .ci/settings.xml -B -DskipTests=true
    - mvn release:perform --settings .ci/settings.xml -B -DskipTests=true
  when: manual
  only:
    - master
  
